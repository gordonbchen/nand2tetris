// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // A-instruction: (opcode) 0 | (15-bit address) 000 0000 0000 0000
        // C-instruction: (opcode) 1 | (unused) 11 |
        //   (comp) a c1 c2 c3 c4 c5 c6 | (dest) d1 d2 d3 | (jump) j1 j2 j3

        // A register holds instruction value if A-instruction (@10)
        // else output of C-instruction (A=D+1).
        // Load register A if A-instruction or A in LHS of C-instruction (d1).
        // Register A output is addressM.
        Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);
        Not(in=instruction[15], out=aInstruct);
        Or(a=aInstruct, b=instruction[5], out=loadA);
        ARegister(in=aIn, out=A, load=loadA, out[0..14]=addressM);

        // Load register D if D in LHS of C-instruction (d2).
        And(a=instruction[15], b=instruction[4], out=loadD);
        DRegister(in=aluOut, out=D, load=loadD);

        // Choose A or M register.
        // Always use A if A-instruction.
        // For C-instruction a=0 uses A, a=1 uses M
        And(a=instruction[15], b=instruction[12], out=useM);
        Mux16(a=A, b=inM, sel=useM, out=AM);

        ALU(
            x=D, y=AM,

            // C comp bits map directly to ALU.
            zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8],
            f=instruction[7], no=instruction[6],

            out=aluOut, zr=zr, ng=ng,

            // Pipe aluOut to outM.
            out=outM,
        );

        // Write M if C-instruction and d3.
        And(a=instruction[15], b=instruction[3], out=writeM);

        // Load next instruction from A-register if jump bit
        // matches and this is a C-instruction.
        // no jump 000
        // jump >  001
        // jump =  010
        // jump >= 011
        // jump <  100
        // jump != 101
        // jump <= 110
        // jump    111
        Not(in=ng, out=nng);
        Not(in=zr, out=nzr);
        And(a=nng, b=nzr, out=pos);
        And(a=instruction[0], b=pos, out=jgt);
        And(a=instruction[1], b=zr, out=jeq);
        And(a=instruction[2], b=ng, out=jlt);

        Or(a=jgt, b=jeq, out=j1);
        Or(a=j1, b=jlt, out=j2);
        And(a=instruction[15], b=j2, out=jump);

        PC(in=A, reset=reset, load=jump, inc=true, out[0..14]=pc);
}
