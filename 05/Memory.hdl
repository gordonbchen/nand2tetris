// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // address max = 2^15 - 1 = 32767 = 111 1111 1111 1111
        // RAM16K max = 16383 = 011 1111 1111 1111
        //        0 | 14-bit address
        // Screen starts at 16384 = 100 0000 0000 0000
        //        ends at 24575 = 101 1111 1111 1111
        //        10 | 13-bit address
        // Keyboard = 110 0000 0000 0000
        //            11
        // Invalid starts at 24577 = 110 0000 0000 0001
        DMux4Way(
            in=true, sel=address[13..14],
            a=useRAM0, b=useRAM1, c=useScreen, d=useKeyboard
        );
        Or(a=useRAM0, b=useRAM1, out=useRAM);
        And(a=useRAM, b=load, out=loadRAM);
        RAM16K(in=in, load=loadRAM, out=RAMOut, address=address[0..13]);

        And(a=useScreen, b=load, out=loadScreen);
        Screen(in=in, load=loadScreen, out=ScreenOut, address=address[0..12]);

        Keyboard(out=KeyboardOut);
        Or8Way(in=address[0..7], out=rOr);
        Or8Way(in[0..4]=address[8..12], in[5]=rOr, in[6..7]=false, out=or13);
        And(a=useKeyboard, b=or13, out=invalid);

        Mux4Way16(
            a=RAMOut, b=RAMOut, c=ScreenOut, d=KeyboardOut,
            sel=address[13..14], out=validOut
        );
        Mux16(a=validOut, b=false, sel=invalid, out=out);
}
